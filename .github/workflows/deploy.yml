name: Build and Deploy Margdarshak Spring Boot Application

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/margdarshak

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::905418404019:instance-profile/MargdarshakEC2Role
          aws-region: ap-south-1

      - name: Install dependencies for Jinja2 templates
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip jq unzip
          pip3 install j2cli[yaml] --break-system-packages

      - name: Fetch secrets from AWS Secrets Manager
        run: |
          mkdir -p /tmp/secrets
          aws secretsmanager get-secret-value \
            --secret-id arn:aws:secretsmanager:ap-south-1:905418404019:secret:margdarshak-GPVtKu \
            --region ap-south-1 \
            --query SecretString \
            --output text > /tmp/secrets/env.json

      - name: Render .j2 templates
        run: |
          find src/main/resources -name '*.j2' | while read -r template; do
            out="${template%.j2}"
            j2 "$template" /tmp/secrets/env.json > "$out"
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: docker build -t $IMAGE:latest .

      - name: Push Docker image to GHCR
        run: docker push $IMAGE:latest

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            IMAGE=ghcr.io/${{ github.repository_owner }}/margdarshak
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull $IMAGE:latest

            # Stop and remove existing container if it exists
            docker stop margdarshak || true && docker rm margdarshak || true
            
            # Run Docker container with updated config
            docker run -d --name margdarshak -p 8080:8080 $IMAGE:latest
            echo "Deployment successful"
