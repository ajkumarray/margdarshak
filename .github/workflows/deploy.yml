name: Build and Deploy Margdarshak Spring Boot Application

on:
  push:
    branches:
      - master

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/margdarshak

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Install dependencies for Jinja2 templates
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip jq unzip
          pip3 install jinja2 PyYAML

      - name: Fetch secrets from AWS Secrets Manager
        run: |
          mkdir -p /tmp/secrets
          aws secretsmanager get-secret-value \
            --secret-id arn:aws:secretsmanager:ap-south-1:905418404019:secret:margdarshak-GPVtKu \
            --region ap-south-1 \
            --query SecretString \
            --output text > /tmp/secrets/env.json

      - name: Render .j2 templates
        run: |
          python3 - <<EOF
          import json
          import os
          from jinja2 import Template

          with open('/tmp/secrets/env.json') as f:
              data = json.load(f)

          for root, _, files in os.walk('src/main/resources'):
              for file in files:
                  if file.endswith('.j2'):
                      j2_path = os.path.join(root, file)
                      out_path = j2_path[:-3]  # Remove .j2
                      with open(j2_path) as template_file:
                          template = Template(template_file.read())
                          rendered = template.render(**data)
                          with open(out_path, 'w') as out_file:
                              out_file.write(rendered)
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: docker build -t $IMAGE:latest .

      - name: Push Docker image to GHCR
        run: docker push $IMAGE:latest

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            IMAGE=ghcr.io/${{ github.repository_owner }}/margdarshak
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull $IMAGE:latest

            # Stop and remove existing container if it exists
            docker stop margdarshak || true && docker rm margdarshak || true
            
            # Run Docker container with updated config
            docker run -d --name margdarshak -p 8080:8080 $IMAGE:latest
            echo "Deployment successful"
